// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PandaTime.UserCatalog.Models;

namespace PandaTime.UserCatalog.Migrations
{
    [DbContext(typeof(BaseContext))]
    partial class BaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PandaTime.UserCatalog.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("PostId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("PandaTime.UserCatalog.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<bool>("Personal");

                    b.HasKey("Id");

                    b.ToTable("Group");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 719, DateTimeKind.Utc), LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 719, DateTimeKind.Utc), Personal = true },
                        new { Id = 2, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 719, DateTimeKind.Utc), LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 719, DateTimeKind.Utc), Personal = true },
                        new { Id = 3, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 719, DateTimeKind.Utc), LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 719, DateTimeKind.Utc), Personal = true },
                        new { Id = 4, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 719, DateTimeKind.Utc), LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 719, DateTimeKind.Utc), Personal = true },
                        new { Id = 5, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 719, DateTimeKind.Utc), LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 719, DateTimeKind.Utc), Personal = true },
                        new { Id = 6, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 719, DateTimeKind.Utc), Description = "This is a public group", LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 719, DateTimeKind.Utc), Name = "Public Group", Personal = false }
                    );
                });

            modelBuilder.Entity("PandaTime.UserCatalog.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<bool>("Default");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new { Id = 1, Code = "en", CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), Default = true, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), Name = "English" },
                        new { Id = 2, Code = "sv", CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), Default = false, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), Name = "Swedish" }
                    );
                });

            modelBuilder.Entity("PandaTime.UserCatalog.Models.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("GroupId");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Membership");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), GroupId = 1, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), RoleId = 1, UserId = 1 },
                        new { Id = 2, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), GroupId = 2, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), RoleId = 2, UserId = 2 },
                        new { Id = 3, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), GroupId = 3, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), RoleId = 3, UserId = 3 },
                        new { Id = 4, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), GroupId = 4, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), RoleId = 4, UserId = 4 },
                        new { Id = 5, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), GroupId = 5, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), RoleId = 4, UserId = 5 },
                        new { Id = 6, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), GroupId = 6, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), RoleId = 1, UserId = 4 },
                        new { Id = 7, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), GroupId = 6, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 721, DateTimeKind.Utc), RoleId = 4, UserId = 5 }
                    );
                });

            modelBuilder.Entity("PandaTime.UserCatalog.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("GroupId");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GroupId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("PandaTime.UserCatalog.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 722, DateTimeKind.Utc), LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 722, DateTimeKind.Utc), Name = "Admin" },
                        new { Id = 2, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 722, DateTimeKind.Utc), LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 722, DateTimeKind.Utc), Name = "Support" },
                        new { Id = 3, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 722, DateTimeKind.Utc), LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 722, DateTimeKind.Utc), Name = "Moderator" },
                        new { Id = 4, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 722, DateTimeKind.Utc), LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 722, DateTimeKind.Utc), Name = "User" }
                    );
                });

            modelBuilder.Entity("PandaTime.UserCatalog.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activated");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .HasMaxLength(256);

                    b.Property<int>("LanguageId");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("LastName")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("User");

                    b.HasData(
                        new { Id = 1, Activated = true, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), Email = "admin@forkyfork.com", FirstName = "Admin", LanguageId = 1, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), LastName = "User", Password = "123" },
                        new { Id = 2, Activated = true, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), Email = "support@forkyfork.com", FirstName = "Support", LanguageId = 1, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), LastName = "User", Password = "123" },
                        new { Id = 3, Activated = true, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), Email = "moderator@forkyfork.com", FirstName = "Moderator", LanguageId = 1, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), LastName = "User", Password = "123" },
                        new { Id = 4, Activated = true, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), Email = "user1@forkyfork.com", FirstName = "User", LanguageId = 1, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), LastName = "Active", Password = "123" },
                        new { Id = 5, Activated = false, CreatedAt = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), Email = "user2@forkyfork.com", FirstName = "User", LanguageId = 1, LastModified = new DateTime(2018, 7, 7, 16, 22, 44, 720, DateTimeKind.Utc), LastName = "Inactive", Password = "123" }
                    );
                });

            modelBuilder.Entity("PandaTime.UserCatalog.Models.Comment", b =>
                {
                    b.HasOne("PandaTime.UserCatalog.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PandaTime.UserCatalog.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PandaTime.UserCatalog.Models.Membership", b =>
                {
                    b.HasOne("PandaTime.UserCatalog.Models.Group", "Group")
                        .WithMany("Memberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PandaTime.UserCatalog.Models.Role", "Role")
                        .WithMany("Memberships")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PandaTime.UserCatalog.Models.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PandaTime.UserCatalog.Models.Post", b =>
                {
                    b.HasOne("PandaTime.UserCatalog.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PandaTime.UserCatalog.Models.Group", "Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PandaTime.UserCatalog.Models.User", b =>
                {
                    b.HasOne("PandaTime.UserCatalog.Models.Language", "Language")
                        .WithMany("Users")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
